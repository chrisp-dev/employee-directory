{"version":3,"sources":["utils/API.js","components/Wrapper/index.js","components/Container/index.js","components/Row/index.js","components/SearchForm/index.js","components/CPTable/index.js","components/SearchResults/index.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Promise","resolve","reject","axios","get","then","res","results","data","catch","err","Wrapper","props","className","Container","fluid","Row","SearchForm","htmlFor","value","search","onChange","handleInputChange","name","list","type","placeholder","id","onClick","handleFormSubmit","CPTable","users","columns","React","useMemo","Header","accessor","Styles","Table","styled","div","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","SearchResults","console","log","title","description","Directory","useState","setUsers","setSearch","useEffect","API","usersData","userData","event","target","url","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5d3f1e3.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// Export an object containing methods we'll use for accessing the random user API\r\nexport default {\r\n    getUsers: function () {\r\n        return new Promise((resolve, reject) => {\r\n            axios\r\n                .get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n                .then(res => {\r\n                    const results = res.data;\r\n                    resolve(results);\r\n                })\r\n                .catch(err => reject(err));\r\n        });\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\n\r\nfunction Container(props) {\r\n    return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form className=\"search\">\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"language\">Search Term:</label>\r\n        <input\r\n          value={props.search}\r\n          onChange={props.handleInputChange}\r\n          name=\"term\"\r\n          list=\"term\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Type in a search term to begin\"\r\n          id=\"term\"\r\n        />\r\n        <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\r\n          Search\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Container from '../Container';\r\nimport Row from '../Row';\r\nimport {\r\n    useTable,\r\n    useGroupBy,\r\n    useFilters,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination\r\n} from 'react-table';\r\n\r\nexport default function CPTable({ users }) {\r\n    const columns = React.useMemo(() => [{\r\n        Header: \"Name\",\r\n        columns: [\r\n            {\r\n                Header: \"Title\",\r\n                accessor: \"name.title\"\r\n            },\r\n            {\r\n                Header: \"First\",\r\n                accessor: \"name.first\"\r\n            },\r\n            {\r\n                Header: \"Last\",\r\n                accessor: \"name.last\"\r\n            }]\r\n    },\r\n    {\r\n        Header: \"Location\",\r\n        columns: [\r\n            {\r\n                Header: \"City\",\r\n                accessor: \"location.city\"\r\n            },\r\n            {\r\n                Header: \"State\",\r\n                accessor: \"location.state\"\r\n            },\r\n            {\r\n                Header: \"Country\",\r\n                accessor: \"location.country\"\r\n            }]\r\n    }], []);\r\n    const data = React.useMemo(() => users, [users])\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Styles>\r\n                    <Table columns={columns} data={data} />\r\n                </Styles>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n  width: 100vw;\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n`\r\nfunction Table({ columns, data }) {\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data\r\n    });\r\n\r\n    // Render the UI for your table\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map(\r\n                    (row, i) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    }\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\nimport CPTable from \"../CPTable\";\r\n\r\nfunction SearchResults(props) {\r\n  console.log(props.users);\r\n  return (\r\n    <ul className=\"list-group search-results\">\r\n      <li className=\"list-group-item\">\r\n        <h2>{props.title}</h2>\r\n        <p>{props.description}</p>\r\n        <CPTable users={props.users} />\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default SearchResults;\r\n","import React, { useEffect, useState } from 'react';\r\nimport API from '../utils/API';\r\nimport Wrapper from '../components/Wrapper';\r\nimport Container from '../components/Container';\r\nimport Row from '../components/Row';\r\nimport SearchForm from '../components/SearchForm';\r\nimport SearchResults from '../components/SearchResults';\r\n\r\nfunction Directory() {\r\n    const [users, setUsers] = useState([]);\r\n    const [userSort, setUserSort] = useState({});\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        API.getUsers().then(usersData => {\r\n            const userData = usersData.results;\r\n            setUsers(userData);\r\n        });\r\n    }, []);\r\n\r\n    const handleInputChange = event => {\r\n        setSearch({ ...search, search: event.target.value });\r\n    };\r\n    return (\r\n        <Wrapper>\r\n            <h1 className=\"jumbotron text-center\">Search User Directory</h1>\r\n            <SearchForm search={search} handleInputChange={handleInputChange} />\r\n\r\n            <SearchResults users={users}\r\n                title=\"Employee Directory Results\"\r\n                description=\"Results\"\r\n                url=\"\"\r\n            />\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Directory;","import React from 'react';\r\nimport './App.css';\r\nimport Directory from './pages/Directory';\r\n\r\nfunction App() {\r\n  return <Directory />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}